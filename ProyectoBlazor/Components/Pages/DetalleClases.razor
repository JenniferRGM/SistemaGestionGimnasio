@page "/detalle-clase/{id}"
@inject NavigationManager NavigationManager

@rendermode InteractiveServer
@using ProyectoBlazor.Modelos
@using ProyectoBlazor.Models
@using ProyectoBlazor.Service
@inject ClaseService ClaseService
@inject EspacioService EspacioService
@inject ReservaService ReservaService
@inject AppState AppState
@inject IJSRuntime JSRuntime

<PageTitle>Detalle de Clase</PageTitle>

<h1>Detalles de la Clase</h1>

@if (clase != null)
{
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">@clase.Nombre</h5>
            <p><strong>Entrenador:</strong> @clase.EntrenadorNombre</p>
            <a href="@("/clases")" class="btn btn-secondary">Volver a Clases</a>
        </div>
    </div>

    <h3>Espacios Disponibles</h3>
    @if (espacios != null && espacios.Count > 0)
    {
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Clase</th>
                    <th>Fecha</th>
                    <th>Cupos</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var espacio in espacios)
                {
                    <tr>
                        <td>@espacio.id</td>
                        <td>@espacio.claseNombre</td>
                        <td>@espacio.fecha.ToString("dd/MM/yyyy HH:mm")</td>
                        <td>@espacio.Cupos</td>
                        <td>
                            <button class="btn btn-primary" @onclick="() => ReservarEspacio(espacio)" data-id="@espacio.id" data-nombre="@espacio.claseNombre">Reservar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No hay espacios disponibles para esta clase.</p>
    }
}
else
{
    <p>Clase no encontrada.</p>
}

@code {
    /// <summary>
    /// Identificador de la clase, proporcionado como parámetro.
    /// </summary>
    [Parameter]
    public string Id { get; set; }

    /// <summary>
    /// Modelo de la clase seleccionada.
    /// </summary>
    private ClasesModel clase;

    /// <summary>
    /// Lista de espacios disponibles para la clase.
    /// </summary>
    private List<EspacioModel> espacios;

    /// <summary>
    /// Método que se ejecuta al inicializar el componente.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (int.TryParse(Id, out var claseId))
            {
                // Obtiene los detalles de la clase y sus espacios asociados
                clase = await ClaseService.ObtenerClasePorId(claseId);
                espacios = await EspacioService.ListarEspaciosPorClaseId(claseId);
            }
            else
            {
                // Si el Id no es válido, redirige a la lista de clases
                NavigationManager.NavigateTo("/clases");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar los detalles de la clase: {ex.Message}");
            // Manejo de errores, como redirigir a la lista de clases en caso de fallo
            NavigationManager.NavigateTo("/clases");
        }
    }

    /// <summary>
    /// Reserva un espacio en la clase seleccionada.
    /// </summary>
    /// <param name="espacio">Espacio a reservar.</param>
    private async Task ReservarEspacio(EspacioModel espacio)
    {
        Console.WriteLine($"Espacio reservado: {espacio.claseNombre} (ID: {espacio.id})");

        // Llama al servicio para registrar la reserva
        await ReservaService.RegistrarReserva(espacio.id, AppState.CurrentUser.Id);

        // Actualiza los datos de la clase y los espacios
        if (int.TryParse(Id, out var claseId))
        {
            clase = await ClaseService.ObtenerClasePorId(claseId);
            espacios = await EspacioService.ListarEspaciosPorClaseId(claseId);

        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "¡Algo salio mal, intenta mas tarde!");

            NavigationManager.NavigateTo("/clases");
        }

        // Muestra un mensaje de éxito y redirige a la página de reservas del cliente
        await JSRuntime.InvokeVoidAsync("alert", "¡Reserva realizada con éxito!");
        NavigationManager.NavigateTo($"/clientes/mis-reservas");
    }
}